

 타입스크립트

 자바스크립트는 타입이 정해져있는 언어? (정적타입, 동적타입)
 "동적타입 언어", 컴파일 시에 값에 따라 타입이 추론되는 형태

 동적타입인 언어의 장점 단점
 단점: 컴파일이 아닌 런타임 시에 타입이 정해지기 때문에, 에러 상황을 예측하기 힘들고 (예상하지 못한 타입이 오면 인지하기도 전에 에러가 발생)
      
      ex) 
        function add(number,number2){
            return number + number2
        }

        add({}, {}) => 실행 안되는 코드. 하지만 자바스크립트는 코드 칠때는 문제 안보여주고 런타임 과정을 통해 실행 될 때 에러가 발생.

 장점: 개발속도가 빠름 (코드 짤때 타입을 생각하지 않아도 됨)

 결과적으로 타입스크립트는 동적 타입 언어인 자바스크립트를 정적 타입 언어로 바꾸어
 코드의 안정성을 높이고 개발자는 이 안정적인 환경에서 개발할 수 있게 된다. (코드 치는 컴파일 과정에서 에러를 감지할 수 있음)
 자바스크립트의 parseInt와 같이 형변환을 안해줘도 됨..!?
 
      ex) 
        function add(num1:number,num2:number){
            return num1 + num2
        }

 타입스크립트는 자바스크립트의 슈퍼셋 [자바스크립트를 더 편리하게 쓰기 위해서 여러 기능을 추가한 것!]
    (cf. 따입스크립트 (ttypescript) => 컴파일 속도가 타입스크립트 보다 더 빠르다는 장점들이 있음)


--------------------------------------------------------------------------------------

타입스크립트 사용하는 이유

(1) 동적 타입 언어인 자바스크립트 -> 정적 타입 언어로 변환시켜줌
    런타임이 아닌 컴파일 과정에서 개발자가 코드를 작성하는 동안 예상치 못한 오류를 쉽게 찾을 수 있게 함
    안정성 상승

(2) 코드 가독성이 높아짐 (코드의 문서화)

    type Seongyong = {
        name: string,
        age: number,
        height: number
    }

    //////
    let seongyong = {
        name: "김성용",
        age: 18,
        height: 195
    }
    //////  나는 현재 이 데이터가 오는지를 모르는 상황. 위의 코드 문서화를 확인하고 예상할 수 있음.

    ...
    const onclick = (person : Seongyong) => {

    }

(3) 생산성

    const onclick = (person) => {
        person.(자동생성 안됨)
        person.name (직접 'name' 이렇게 기재해줘야 함)
    }
    onclick(1)  // (person이라는 매개변수의 타입이 any이기 때문에)


    [타입스크립트]
    const onclick = (person : Seongyong) => {
        person.name (자동완성 가능 => 위에서 Seongyong 이라는 person 타입을 지정해줬기 때문에)
    }

